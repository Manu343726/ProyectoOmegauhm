package es.fdi.iw;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import util.IWEntityManager;
import es.fdi.iw.model.Topic;
import es.fdi.iw.model.Post;
import es.fdi.iw.model.User;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@PersistenceContext
	private EntityManager entityManager;
	
	public boolean isLogged(HttpSession session)
	{
		return session.getAttribute("user") != null;
	}
	
	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/signinUser", method = RequestMethod.POST)
	@Transactional
	public String signin(HttpServletRequest request, Model model, HttpSession session) {
		String formLogin = request.getParameter("login");
		String formPass = request.getParameter("pass");
		logger.info("Sign in attempt from '{}'", formLogin);
		
		User u = null;
		try {
			u = (User)entityManager.createNamedQuery("userByLogin")
				.setParameter("loginParam", formLogin).getSingleResult();
			
			if (u.isPassValid(formPass)) {
				logger.info("pass was valid");				
				session.setAttribute("user", u);
			} else {
				logger.info("pass was NOT valid");
				model.addAttribute("signinError", "error en usuario o contraseña");
			}
		} catch (NoResultException nre) {
			logger.info("no-such-user with login {}", formLogin);
		}
		
		return "redirect:/";
	}
	
	@RequestMapping(value = "/joinUser", method = RequestMethod.POST)
	@Transactional
	public String join(HttpServletRequest request, Model model, HttpSession session) {
		String formLogin = request.getParameter("login");
		String formEmail = request.getParameter("email");
		String formPass = request.getParameter("pass");
		logger.info("Register attempt from '{}'", formLogin);
		
		IWEntityManager manager = new IWEntityManager(entityManager);
			
		
		User u = null;
		
		try {
			u = manager.userByLogin(formLogin);
			
			logger.info("user {} already exists", formLogin);
		} catch (NoResultException nre) {
			logger.info("no-such-user; creating user {}", formLogin);
			User user = manager.newUser(formLogin, formEmail, formPass);				
			session.setAttribute("user", user);
		}
		
		return "redirect:/";
	}
	
	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "redirect:/";
	}

	@RequestMapping(value="/file/fileload", method=RequestMethod.POST)
    public @ResponseBody String handleFileUpload(@RequestParam("file") MultipartFile load, @RequestParam("tags") String tags)
	{
        es.fdi.iw.model.File file = ContextInitializer.getFileManager().uploadFile(load, tags);
        
        if(file != null)
        {
        	entityManager.persist(file);
        }
        
        return "repository";
    }
	
	public void addThreadsToSession(Model model)
	{
		List<Topic> threads = entityManager.createQuery("select t from Topic t").getResultList();
		System.err.println(threads.size());
		model.addAttribute("threads", threads);
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	@Transactional
	public String empty(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate);
		model.addAttribute("pageTitle", "Bienvenido a IW");
		
		
		//Mocking
		if(entityManager.createQuery("select t from Topic t").getResultList().size() <= 0)
		{
			IWEntityManager manager = new IWEntityManager(entityManager);
			
			int threads = 10;
			int answers_per_thread = 10;
			
			logger.info("Mocking up DB...");
			
			for(int i = 0; i < threads; ++i)
			{
				Topic topic = manager.newTopic("user" , "Título pregunta " + i, "Texto pregunta " + i, "tag1 tag2 tag3");
				
				for(int j = 0; j < answers_per_thread; ++j)
					manager.newPost(topic, "Texto respuesta " + i + "." + j, "admin");
			}
		}
		
		this.addThreadsToSession(model);
		
		return "home";
	}	

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(Locale locale, Model model) {
		return empty(locale, model);
	}	

	/**
	 * A not-very-dynamic view that shows an "about us".
	 */
	@RequestMapping(value = "/about", method = RequestMethod.GET)
	@Transactional
	public String about(Locale locale, Model model) {
		logger.info("User is looking up 'about us'");
		List<User> us = entityManager.createQuery("select u from User u").getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		model.addAttribute("pageTitle", "IW: Quienes somos");
		return "about";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/repository", method = RequestMethod.GET)
	public String repository(Locale locale, Model model) {
		return "repository";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/forum", method = RequestMethod.GET)
	public String forum(Locale locale, Model model) {
		logger.info("ENTRANDO AL FORO");
		this.addThreadsToSession(model);
		
		return "forum";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/admin", method = RequestMethod.GET)
	public String admin(Locale locale, Model model) {
		return "admin";
	}
	
	@RequestMapping(value = "/file/select", method = RequestMethod.GET)
	public String fileSelect(Locale locale, Model model) {
		return "fileload";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/signin", method = RequestMethod.GET)
	public String signin(Locale locale, Model model) {
		return "signin";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String join(Locale locale, Model model) {
		return "join";
	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/publication", method = RequestMethod.GET)
	public String publication(Locale locale, Model model, HttpSession session) {
			if(isLogged(session))
				return "publication";
			else 
				return "redirect:/";
	 	}
	
	/**
	 * 
	 */
	@RequestMapping(value = "/resources/leeme", method = RequestMethod.GET)
	public String leeme(Locale locale, Model model) {
		return "LEEME";
	}
	
	@Transactional
	@RequestMapping(value = "/newpost", method = RequestMethod.POST)
	public String newpost(HttpServletRequest request, Model model, HttpSession session) {
		String formText = request.getParameter("text");
		String formTitle = request.getParameter("title");
		String formTags = request.getParameter("tags");
		
		logger.info(formTitle);
		logger.info(formText);
		logger.info(formTags);
		
		IWEntityManager manager = new IWEntityManager(entityManager);
		User user = (User)session.getAttribute("user");
		
		if(user == null)
			return "404";
		
		manager.newTopic(user, formTitle, formText, formTags);
		

		return "redirect:/forum";
	}
	
	/**
	 * Opens topic
	 */
	@Transactional
	@RequestMapping(value = "/topic/{id}/{title}", method = RequestMethod.GET)
	public String topic(@PathVariable("id") long id, @PathVariable("title") String title, HttpSession session, HttpServletRequest request) {		
		Topic topic = (Topic)entityManager.createNamedQuery("topicById")
		 								  .setParameter("idParam", id).getSingleResult();
		
		session.setAttribute("topic", topic);
		
		//Workaround to hibernate lazy initialization issue
		session.setAttribute("topic_question", topic.getQuestion());
		session.setAttribute("topic_answers", topic.getAnswers());
		session.setAttribute("topic_asker", topic.getQuestion().getOwner());
		
		//Some logging for logging purposes and to force lazy initialization of answers list
		for(Post answer : topic.getAnswers())
			logger.info("Answer [id=" + answer.getId() + ",owner=" + answer.getOwner().getLogin() + ",points=" + answer.getVotes() + "]");
		
		return "topic";
	}
	
	@Transactional
	String topicURI(Topic topic)
	{
		return "topic/" + topic.getId() + "/" + topic.getTitle();
	}
	
	/**
	 * Votes on post
	 */
	@Transactional
	@RequestMapping(value = "/vote/{id}/{value}", method = RequestMethod.GET)
	public String vote(@PathVariable("id") long id, @PathVariable("value") int value, HttpSession session, HttpServletRequest request) {		
		Post post = (Post)entityManager.createNamedQuery("postById")
		 							   .setParameter("idParam", id).getSingleResult();
		
		if(!this.isLogged(session))
			return "401"; //go fuck yourself
		
		if(value >= 0)
			post.setUpVotes(post.getUpVotes() + value);
		else
			post.setDownVotes(post.getDownVotes() - value);
		
		return "redirect:/" + post.getUri();
	}
	
}
